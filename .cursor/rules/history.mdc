---
description: Listening history implementation
globs: 
alwaysApply: false
---
# Bible Reading History Feature

## Requirements
- Track user's reading history (book and chapter selections)
- Store history entries with timestamps
- Store the last listened chapter separately for session restoration
- Handle language switching properly by storing book IDs instead of localized book objects
- Allow users to view their reading history
- Allow users to clear their history
- Display history in a dialog that can be opened from the header
- Show each history entry with book name, chapter number, and timestamp
- Allow users to click on a history entry to navigate to that book and chapter
- Restore the last listened chapter on app load instead of defaulting to Genesis 1
- Prevent automatic default selections from being added to history

## Implementation
- Use Zustand for state management with persist middleware
- Store book IDs (indices) and chapter numbers instead of full book objects
- Handle store hydration properly to avoid Genesis 1 being added to history
- Create a history store with add, clear, and last chapter tracking functions
- Implement a HistoryDialog component with a trigger button in the header
- Format dates based on the current locale
- Provide empty state message when no history exists
- Show scrollable list of history entries when available
- Add clear history button in the dialog header
- Use Zustand's built-in hasHydrated() method for hydration status tracking

## Language-Agnostic Storage Strategy
- Store only book ID (index in books array) and chapter number
- Resolve book objects from current locale's books array using stored ID
- Handle language switching gracefully without breaking session restoration
- Maintain compatibility across English/Russian language switches

## Store Hydration Strategy
- Use Zustand's built-in persist.hasHydrated() method instead of custom tracking
- Remove custom _hasHydrated flag and onRehydrateStorage callback
- Only add selections to history after store has hydrated
- Initialize BibleContext with last listened chapter after hydration
- Prevent default Genesis 1 selection from being persisted

## Design
- Use Dialog component from shadcn/ui for desktop
- Use Drawer component from shadcn/ui for mobile with background scaling
- Display history entries in a scrollable list
- Style history entries as clickable buttons
- Show timestamp in a smaller, muted text
- Keep the UI clean and consistent with the rest of the application

# History Feature Implementation

## Overview
Implementation of reading history functionality for the Bible app, allowing users to track and revisit previously read chapters, with proper session restoration and language switching support.

## Components

### HistoryDialog
- **Location**: `src/components/bible/HistoryDialog.tsx`
- **Purpose**: Displays reading history in a responsive dialog/drawer
- **Features**:
  - Responsive design using useMediaQuery hook for desktop/mobile layouts
  - Desktop: Modal dialog with clear history button
  - Mobile: Bottom drawer interface with background scaling enabled
  - List of previous readings with timestamps
  - Click to navigate back to previous chapters
  - Proper component usage: DialogClose for dialog section, DrawerClose for drawer section

### Drawer Component
- **Location**: `src/components/ui/drawer.tsx`
- **Fix Applied**: Added proper shouldScaleBackground prop forwarding to DrawerPrimitive.Root
- **Issue**: The shouldScaleBackground prop was not being passed through to the underlying vaul drawer component
- **Solution**: Explicitly destructure and forward the shouldScaleBackground prop

## Hooks

### useMediaQuery
- **Location**: `src/hooks/use-media-query.ts`
- **Purpose**: Provides responsive breakpoint detection
- **Usage**: Returns boolean indicating if media query matches
- **Implementation**: 
  - Must return the matches state value
  - Should properly handle media query change events
  - Includes cleanup for event listeners

## Store Integration
- Uses `useHistoryStore` for history data management with built-in hydration tracking
- Uses `useBible` context for navigation with proper initialization
- Uses `useLocaleStore` for date formatting
- Implements Zustand persist middleware with built-in hasHydrated() method
- Stores language-agnostic book IDs and chapter numbers

## Key Requirements
- Responsive design with desktop dialog and mobile drawer
- History items show book name, chapter, and formatted timestamp
- Clear history functionality
- Last listened chapter restoration on app load
- Language switching compatibility
- Proper TypeScript types
- Internationalization support
- Proper component usage (DialogClose vs DrawerClose)
- Background scaling functionality for drawer on mobile
- Built-in hydration tracking using persist.hasHydrated()

## Store Hydration Implementation
1. **Hydration Status Tracking**: Use Zustand's built-in persist.hasHydrated() method
2. **Last Chapter Persistence**: Store lastListenedChapter with bookId and chapter number
3. **Conditional History Addition**: Only add to history after hydration is complete
4. **BibleContext Initialization**: Wait for hydration before setting initial selection
5. **Language Agnostic Storage**: Store book IDs instead of localized book objects

## Bug Fixes Applied
1. **Drawer Background Scaling**: Fixed shouldScaleBackground prop not being forwarded in drawer.tsx
2. **Component Usage**: Fixed incorrect DialogClose usage in drawer section - should use DrawerClose
3. **Genesis 1 Auto-Addition**: Prevent default selection from being automatically added to history
4. **Session Restoration**: Properly restore last listened chapter instead of defaulting to Genesis 1
5. **Language Switching**: Store book IDs instead of localized book objects to handle language changes
6. **Hydration Tracking**: Replaced custom _hasHydrated implementation with Zustand's built-in persist.hasHydrated() method

# History Store Implementation

## Overview
The history store manages user's listening history and tracks the last listened chapter using Zustand with persistence.

## Current Implementation Status
- âœ… Basic history store structure with persistence
- âœ… History entry tracking with timestamps
- âœ… Last listened chapter tracking
- ðŸ”§ **CURRENT ISSUE**: Missing locale property in lastListenedChapter setter
- ðŸ”§ **CURRENT CONCERN**: Potential race condition with locale store hydration

## Key Components

### Types
- `HistoryEntry`: Contains locale, bookId, chapter, and timestamp
- `LastListenedChapter`: Contains locale, bookId, and chapter
- `HistoryStore`: Main store interface

### Store Features
- Persisted history with max 20 items
- Development mode with mock data
- Hydration checks before operations
- Duplicate entry filtering

## Current Issues to Address

### 1. Missing Locale in lastListenedChapter
The `setLastListenedChapter` function is missing the locale property when creating the lastListenedChapter object.

### 2. Locale Store Hydration Race Condition
Since both history store and locale store use persistence, there's a potential race condition where:
- History store hydrates first
- Calls `useLocaleStore.getState().locale` before locale store hydrates
- Gets default 'en' instead of persisted locale value

### Solution Approach
- Add locale property to lastListenedChapter setter
- Add locale store hydration check before accessing its state
- Ensure both stores are hydrated before proceeding with operations

## Implementation Rules
- Always check hydration status before store operations
- Include locale in all history-related data structures
- Handle race conditions between dependent stores
- Maintain max history limit of 20 items
- Filter duplicates when adding new entries
